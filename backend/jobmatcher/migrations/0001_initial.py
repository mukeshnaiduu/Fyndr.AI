# Generated by Django 4.2.23 on 2025-07-31 14:55

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("fyndr_auth", "0004_companyprofile_companyrecruiterrelationship_and_more"),
        ("jobscraper", "0002_alter_jobposting_description"),
    ]

    operations = [
        migrations.CreateModel(
            name="UserPreferences",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preferred_roles",
                    models.JSONField(
                        default=list, help_text="List of preferred job titles/roles"
                    ),
                ),
                (
                    "preferred_locations",
                    models.JSONField(
                        default=list, help_text="List of preferred work locations"
                    ),
                ),
                (
                    "remote_preference",
                    models.CharField(
                        choices=[
                            ("REMOTE", "Remote Only"),
                            ("HYBRID", "Hybrid Preferred"),
                            ("ONSITE", "On-site Preferred"),
                            ("FLEXIBLE", "No Preference"),
                        ],
                        default="FLEXIBLE",
                        help_text="Work location preference",
                        max_length=20,
                    ),
                ),
                (
                    "salary_expectation",
                    models.IntegerField(
                        blank=True, help_text="Expected annual salary in USD", null=True
                    ),
                ),
                (
                    "salary_currency",
                    models.CharField(
                        default="USD",
                        help_text="Currency for salary expectation",
                        max_length=3,
                    ),
                ),
                (
                    "employment_types",
                    models.JSONField(
                        default=list,
                        help_text="Preferred employment types (Full-time, Part-time, Contract, etc.)",
                    ),
                ),
                (
                    "company_sizes",
                    models.JSONField(
                        default=list,
                        help_text="Preferred company sizes (Startup, Mid-size, Enterprise)",
                    ),
                ),
                (
                    "industries",
                    models.JSONField(default=list, help_text="Preferred industries"),
                ),
                (
                    "min_match_score",
                    models.FloatField(
                        default=50.0,
                        help_text="Minimum job score to consider for applications",
                    ),
                ),
                (
                    "auto_apply_threshold",
                    models.FloatField(
                        default=85.0,
                        help_text="Score threshold for automatic application (if enabled)",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user_profile",
                    models.OneToOneField(
                        help_text="Associated user profile",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="preferences",
                        to="fyndr_auth.jobseekerprofile",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Preferences",
                "verbose_name_plural": "User Preferences",
            },
        ),
        migrations.CreateModel(
            name="PreparedJob",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "tailored_resume",
                    models.FileField(
                        blank=True,
                        help_text="AI-tailored resume for this specific job",
                        null=True,
                        upload_to="tailored_resumes/",
                    ),
                ),
                (
                    "tailored_cover_letter",
                    models.FileField(
                        blank=True,
                        help_text="AI-generated cover letter for this specific job",
                        null=True,
                        upload_to="tailored_cover_letters/",
                    ),
                ),
                (
                    "score",
                    models.FloatField(
                        help_text="Job score from JobScore model (cached for quick access)"
                    ),
                ),
                (
                    "packet_ready",
                    models.BooleanField(
                        default=False,
                        help_text="Whether all documents are prepared and ready for application",
                    ),
                ),
                (
                    "packet_created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="When this job packet was created"
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True, help_text="When this packet was last modified"
                    ),
                ),
                (
                    "applied",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this job packet has been used for application",
                    ),
                ),
                (
                    "applied_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="When application was submitted using this packet",
                        null=True,
                    ),
                ),
                (
                    "ai_customization_notes",
                    models.TextField(
                        blank=True,
                        help_text="Future: AI notes on what customizations were made",
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        help_text="Future: AI confidence in the document tailoring quality",
                        null=True,
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        help_text="The job for which documents are prepared",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prepared_jobs",
                        to="jobscraper.jobposting",
                    ),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        help_text="The user profile for document tailoring",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="prepared_jobs",
                        to="fyndr_auth.jobseekerprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-score", "-packet_created_at"],
                "indexes": [
                    models.Index(
                        fields=["user_profile", "-score"],
                        name="jobmatcher__user_pr_5a0355_idx",
                    ),
                    models.Index(
                        fields=["packet_ready", "-packet_created_at"],
                        name="jobmatcher__packet__8bbb2e_idx",
                    ),
                    models.Index(
                        fields=["applied", "-applied_at"],
                        name="jobmatcher__applied_197041_idx",
                    ),
                ],
                "unique_together": {("job", "user_profile")},
            },
        ),
        migrations.CreateModel(
            name="JobScore",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "score",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Match score percentage (0-100)",
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "match_status",
                    models.CharField(
                        choices=[
                            ("HIGH", "High Match (80-100%)"),
                            ("MEDIUM", "Medium Match (50-79%)"),
                            ("LOW", "Low Match (0-49%)"),
                        ],
                        help_text="Categorized match level based on score",
                        max_length=10,
                    ),
                ),
                (
                    "skills_matched",
                    models.JSONField(
                        default=list,
                        help_text="List of skills from user profile that match job requirements",
                    ),
                ),
                (
                    "keywords_missed",
                    models.JSONField(
                        default=list,
                        help_text="List of required skills/keywords that user is missing",
                    ),
                ),
                (
                    "scored_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When this job was scored for this user",
                    ),
                ),
                (
                    "embedding_similarity",
                    models.FloatField(
                        blank=True,
                        help_text="Future: Semantic similarity score using AI embeddings",
                        null=True,
                    ),
                ),
                (
                    "ai_reasoning",
                    models.TextField(
                        blank=True,
                        help_text="Future: AI-generated explanation for the score",
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        help_text="The job being scored",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_scores",
                        to="jobscraper.jobposting",
                    ),
                ),
                (
                    "user_profile",
                    models.ForeignKey(
                        help_text="The user profile for scoring comparison",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="job_scores",
                        to="fyndr_auth.jobseekerprofile",
                    ),
                ),
            ],
            options={
                "ordering": ["-score", "-scored_at"],
                "indexes": [
                    models.Index(
                        fields=["user_profile", "-score"],
                        name="jobmatcher__user_pr_4db4c7_idx",
                    ),
                    models.Index(
                        fields=["match_status", "-scored_at"],
                        name="jobmatcher__match_s_07a111_idx",
                    ),
                    models.Index(fields=["score"], name="jobmatcher__score_6f85bd_idx"),
                ],
                "unique_together": {("job", "user_profile")},
            },
        ),
    ]
